services:
  next:
    build:
      args:
        NODE_VER: ${NODE_VERSION}
      context: .
      dockerfile: ./.devcontainer/frontend/Dockerfile
    tty: true
    volumes:
      - type: bind
        source: next-app
        target: /home/node/app/next-app
      - type: volume
        source: node_modules
        target: /home/node/app/next-app/node_modules
  go-app:
    build:
      args:
        GO_VER: ${GO_VERSION}
      context: .
      dockerfile: ./.devcontainer/api/Dockerfile
    tty: true
    stdin_open: true
    ports:
      - "8080:8080"
    command: /bin/bash
    volumes:
      - type: bind
        source: go-app
        target: /workspace
  keycloak:
    image: quay.io/keycloak/keycloak:${KEYCLOAK_VERSION}
    tty: true
    stdin_open: true
    ports:
      - "18080:8080" # 8080は被りやすいので別のポートに設定
    volumes:
      - type: volume
        source: keycloak-store
        target: /opt/keycloak/data
    environment:
      KEYCLOAK_ADMIN: admin # 管理ユーザーIDを設定
      KEYCLOAK_ADMIN_PASSWORD: passwd # 管理ユーザーのパスワードを設定
    command:
      - start-dev # 開発モードで起動
  postgres:
    image: postgres:${POSTGRES_VERSION}
    ports:
      - 5432:5432
    volumes:
      - type: volume
        source: db-store
        target: /var/lib/postgresql/data
      - type: bind
        source: ./docker/postgres/init
        target: /docker-entrypoint-initdb.d
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: sample
      TZ: Asia/Tokyo
  cauchbase:
    image: couchbase/server:${CAUCHBASE_VERSION}
    ports:
      - 8091:8091
      - 11210:11210
    volumes:
      # bindマウントでも対応可能
      - type: volume
        source: cauchbase-store
        target: /opt/couchbase/var
  pgadmin4:
    image: dpage/pgadmin4:9.1.0
    ports:
      - 8081:80
    volumes:
      - type: volume
        source: pgadmin-data
        target: /var/lib/pgadmin
      - type: bind
        source: ./docker/pgadmin4/config/servers.json
        target: /pgadmin4/servers.json
    environment:
      PGADMIN_DEFAULT_EMAIL: user@example.com
      PGADMIN_DEFAULT_PASSWORD: password
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
    depends_on:
      - postgres
  minio:
    image: minio/minio:${MINIO_VERSION}
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=adminpass
    ports:
      - "9000:9000" # API用ポート
      - "9001:9001" # 管理コンソール用ポート
    volumes:
      - type: volume
        source: minio-store
        target: /data
      - type: bind
        source: ./docker/minio/init_data
        target: /init_data
  mc:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      mc alias set myminio http://minio:9000 admin adminpass;
      mc mb myminio/sample;
      mc cp /init_data/* myminio/sample;
      "
  prefect:
    build:
      args:
        PYTHON_VER: ${PYTHON_VERSION}
      context: .
      dockerfile: ./.devcontainer/batch/Dockerfile
    volumes:
      - type: bind
        source: prefect
        target: /home/pyuser/python
    restart: always
    tty: true
  kong-database:
    image: postgres:14
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kongpass
    ports:
      - "5433:5432"
    volumes:
      - type: volume
        source: kong-store
        target: /var/lib/postgresql/data
  kong:
    image: kong:${KONG_VERSION}
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kongpass
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    tty: true
    depends_on:
      - kong-database
    ports:
      - "8000:8000"
      - "8001:8001"

  opa:
    image: openpolicyagent/opa:${OPA_VERSION}
    ports:
      - "8181:8181"
    tty: true

volumes:
  node_modules:
  keycloak-store:
  db-store:
  cauchbase-store:
  pgadmin-data:
  minio-store:
  kong-store:
